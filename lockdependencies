local dependencies = {}

function dependencies.world_to_viewport_point(position)
    return workspace.CurrentCamera:WorldToViewPortPoint(position)
end

function dependencies.world_to_screen_point(position)
    return workspace.CurrentCamera:WorldToScreenPoint(position)
end

function dependencies.on_screen(part)
	local part_to_check = part
	local camera = workspace.CurrentCamera

	local vector, in_viewport = camera:WorldToViewportPoint(part_to_check.Position)
	local on_screen = in_viewport and vector.Z > 0

	local is_visible = on_screen
	
	return is_visible
end

function dependencies.obscured_ray(startpos, endpos, target)
    local rayOrigin = startpos
    local rayDirection = endpos - startpos

    local raycast_params = RaycastParams.new()
    raycast_params.FilterDescendantsInstances = {game.Players.LocalPlayer.Character, target}
    raycast_params.FilterType = Enum.RaycastFilterType.Exclude

    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycast_params)
    if raycastResult then
        return true
    else
        return false
    end
end

function dependencies.get_target(position)
    local closest = nil
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and dependencies.on_screen(player.Character.HumanoidRootPart) then
            if closest then
                if (closest.Character.HumanoidRootPart.Position - position).Magnitude > (player.Character.HumanoidRootPart.Position - position).Magnitude then
                    closest = player
                end
            else
                closest = player
            end
        end
    end

    return closest
end

return dependencies
